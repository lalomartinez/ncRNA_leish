use Getopt::Long qw(GetOptions);

## ------------------------------------------------------- USAGE
my $usage = "\n\tUsage: perl $0 -i <FILE_RUTE_FASQT>

		Options:

		**DATA RAW**
		-PE|--pair-end		Pair-end data				(Single-end Default)

		**OTHER**
		-t|--threads		Number of Threads			(Default is 5)
		-g|--strings-grep	Comma separated strings used
					to identify adapters in fasqtc data	(Default is primer,adapter)

		**FLAGS**
		-h			Print help
		-q			Perform quallity steps\n\n" ;




## ------------------------------------------------------- DIE if not arguments
if (@ARGV < 1){
	die "\nNot option found!$usage";
}




## ------------------------------------------------------- OPTIONS

my $pair_end;
my $help;
my $input;
my $threads;
my $strings_fastqc = "primer,adapter";
my $quallity;

GetOptions(

	'from=s'=> \$source_address,
	'pair-end|PE' => \$pair_end,
	'h' => \$help,
	'input|i=s' => \$input,
	'threads|t=s' => \$threads,
	'strings-grep|g=s' => \$strings_fastqc,
	'q' => \$quallity,

) or die "$usage";




## ------------------------------------------------------- CHECK OPTIONS

if ($help){
	die "\n\t----------------- You selected help (-h) -----------------\n$usage";
}

if (!$input) {
	die "\nNot input file. Use -h for help\n\n";
}




## ------------------------------------------------------- MAKING FOLDERS

system "mkdir -p 00-quallity/00-quallity_raw_data";
system "mkdir -p 00-quallity/01-quallity_clean_data";
system "mkdir -p 01-trimming/00-trimming_raw_data";
system "mkdir -p 02-mapping/01-bowtie2";
#system "mkdir -p 03-HTseq_count/";




## ------------------------------------------------------- SCRIPTS PERL REQUIRED

my $adapters_recov = "bin/1_adapter_seq.pl";




##                                                             CODE



## ------------------------------------------------------- 1.- QUALLITY CONTROL ----------------------------------------------------- ##

if (defined $quallity){

	## ------------------------ Quallity control

	my @files = `cut -f 1 $input`;
	chomp @files;

	my $all_files = join (" ", @files);

	#system "fastqc --quiet --outdir 00-quallity/00-quallity_raw_data --threads $threads $all_files\n";
	system "fastqc --outdir 00-quallity/00-quallity_raw_data --threads $threads $all_files\n";




	## ------------------------ FASTA of adapters

	system "cat 00-quallity/00-quallity_raw_data/*.html | perl $adapters_recov - | grep -i '$strings_fastqc' | cut -f 1 | sort -u | awk '{print \">adapter_\" NR \"\\n\" \$1}' | cat - bin/z_adapters_truseq.fasta | awk 'NF >= 1' > 00-quallity/z_adapters_sequencing.fasta\n";

} else {

	my $test_fasta_presence = `ls 00-quallity/z_adapters_sequencing.fasta`;
	chomp $test_fasta_presence;

	if ($test_fasta_presence =~ /cannot access/){
		print "\nNot found FASTA of adapters generated by quallity control step. Use the script with -g option.\n\n";
	} else {
		print "\nFound FASTA of adapters generated by quallity control step. Advancing to next step...\n\n";
	}
}








## ------------------------------------------------------- 2.- AUTOMATIZING ----------------------------------------------------- ##

##----------------------- trimming single end

my $adapters = "00-quallity/z_adapters_sequencing.fasta";

my @rutes = `cat $input`;
chomp @rutes;

if (!$pair_end){

	foreach my $each_rute (@rutes){

		my @div_input = split ("\t", $each_rute);

		my $rute_fastq = $div_input[0];
		my $specie = $div_input[-4];
		my $gff = $div_input[-3];
		my $index = $div_input[-2];
		my $index_bt2 = $div_input[-1];

		my $name_out = `ls $rute_fastq | awk -F "/" '{print \$NF}'`;
		chomp $name_out;

		$name_out =~ s/\.fastq\.gz//g;

		system "trimmomatic SE -threads $threads -phred33 $rute_fastq  01-trimming/00-trimming_raw_data/$name_out\_good.fastq ILLUMINACLIP:$adapters:2:30:10 LEADING:5 TRAILING:5 SLIDINGWINDOW:4:30 MINLEN:15\n";


##----------------------- mapping single end hisat2

#		$name_out =~ s/_1//g;

#		system "mkdir -p 02-mapping/$specie";
#		print "making hisat2 mapping step \n";
#		system "hisat2 -p $threads --rna-strandness R -x $index -U 01-trimming/00-trimming_raw_data/$name_out\_1_good.fastq -S 02-mapping/$specie/$name_out\.sam\n";


##----------------------- mapping single end bowtie2

		$name_out =~ s/_1//g;

		system "mkdir -p 02-mapping/01-bowtie2/$specie";
		print "making bowtie2 mapping step \n";
		system "bowtie2 -p $threads -x $index_bt2 -U 01-trimming/00-trimming_raw_data/$name_out\_1_good.fastq -S 02-mapping/01-bowtie2/$specie/$name_out\.sam\n";




##----------------------- HTSEQ-count

#		system "mkdir -p 03-HTseq_count/$specie";
#		system "htseq-count -s no -m intersection-nonempty -t CDS 02-mapping/$specie/$name_out\.sam $gff > 03-HTseq_count/$specie/$name_out.htseq\n";


##----------------------- pass SAM to BAM
		
#		system "samtools view --threads $threads -b 02-mapping/$specie/$name_out\.sam -o 02-mapping/$specie/$name_out\.bam";
#		system "rm 02-mapping/$specie/$name_out\.sam";
#		print "sorting step for hisat2 output";
#		system "samtools sort --threads $threads 02-mapping/$specie/$name_out\.sam -o 02-mapping/$specie/$name_out\_sorted.sam";
#		system "rm 02-mapping/$specie/$name_out\.sam";

#		system "samtools view --threads $threads -b 02-mapping/01-bowtie2/$specie/$name_out\.sam -o 02-mapping/01-bowtie2/$specie/$name_out\.bam";
#		system "rm 02-mapping/01-bowtie2/$specie/$name_out\.sam";
		print "sorting step for bowtie2 output";
		system "samtools sort --threads $threads 02-mapping/01-bowtie2/$specie/$name_out\.sam -o 02-mapping/01-bowtie2/$specie/$name_out\_sorted.sam";
		system "rm 02-mapping/01-bowtie2/$specie/$name_out\.sam";



#### AQUI HTSEQ COUNT COMMNAD

	}

} else {

##----------------------- trimming pair end
	foreach my $each_rute (@rutes){

		my ($rute_file1, $rute_file2, $specie, $gff, $index, $idex_bt2) = split ("\t", $each_rute);

		my $name_out_1 = `ls $rute_file1 | awk -F "/" '{print \$NF}'`;
		chomp $name_out_1;

		my $name_out_2 = `ls $rute_file2 | awk -F "/" '{print \$NF}'`;
		chomp $name_out_2;

		$name_out_1 =~ s/\.fastq\.gz//g;
		$name_out_2 =~ s/\.fastq\.gz//g;


		system "trimmomatic PE -threads $threads -phred33 $rute_file1 $rute_file2 01-trimming/00-trimming_raw_data/$name_out_1\_paired.fastq 01-trimming/00-trimming_raw_data/$name_out_1\_unpaired.fastq 01-trimming/00-trimming_raw_data/$name_out_2\_paired.fastq 01-trimming/00-trimming_raw_data/$name_out_2\_unpaired.fastq ILLUMINACLIP:$adapters:2:30:10 LEADING:5 TRAILING:5 SLIDINGWINDOW:4:30 MINLEN:15\n";


##----------------------- mapping pair end hisat2

#		$name_out_1 =~ s/_1//g;

#		system "mkdir -p 02-mapping/$specie";
#		print "making hisat2 mapping step \n";
#		system "hisat2 -p $threads --rna-strandness RF -x $index -1 01-trimming/00-trimming_raw_data/$name_out_1\_1_paired.fastq -2 01-trimming/00-trimming_raw_data/$name_out_2\_paired.fastq -S 02-mapping/$specie/$name_out_1\.sam\n";

##----------------------- mapping pair end bowtie2

		$name_out_1 =~ s/_1//g;

		system "mkdir -p 02-mapping/01-bowtie2/$specie";
		print "making bowtie2 mapping step \n";
		system "bowtie2 -p $threads -x $index -1 01-trimming/00-trimming_raw_data/$name_out_1\_1_paired.fastq -2 01-trimming/00-trimming_raw_data/$name_out_2\_paired.fastq -S 02-mapping/01-bowtie2/$specie/$name_out_1\.sam\n";


##----------------------- HTSEQ-count

#		system "mkdir -p 03-HTseq_count/$specie";
#		system "htseq-count -s no -m intersection-nonempty -t CDS 02-mapping/$specie/$name_out_1\.sam $gff > 03-HTseq_count/$specie/$name_out_1.htseq\n";


##----------------------- pass SAM to BAM
		
#		system "samtools view --threads $threads -b 02-mapping/$specie/$name_out_1\.sam -o 02-mapping/$specie/$name_out_1\.bam";
#		system "rm 02-mapping/$specie/$name_out_1\.sam";
#		print "sorting step for hisat2 output";
#		system "samtools sort --threads $threads 02-mapping/$specie/$name_out_1\.sam -o 02-mapping/$specie/$name_out_1\_sorted.sam";
#		system "rm 02-mapping/$specie/$name_out_1\.sam";

#		system "samtools view --threads $threads -b 02-mapping/01-bowtie2/$specie/$name_out_1\.sam -o 02-mapping/01-bowtie2/$specie/$name_out_1\.bam";
#		system "rm 02-mapping/01-bowtie2/$specie/$name_out_1\.sam";
		print "sorting step for bowtie2 output";
		system "samtools sort --threads $threads 02-mapping/01-bowtie2/$specie/$name_out_1\.sam -o 02-mapping/01-bowtie2/$specie/$name_out_1\_sorted.sam";
		system "rm 02-mapping/01-bowtie2/$specie/$name_out_1\.sam";



	}
}









### NOT USED BUT SAVED THE COMMAND

##----------------------- Cuffquant run

#		system "mkdir -p 03-cuffquant/$specie";
#		print "cuffquant -p $threads --library-type fr-unstranded $gff 02-mapping/$specie/$name_out\.bam -o 03-cuffquant/$specie\n";



























